<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Options_AllInOneProject" xml:space="preserve">
    <value>Views &amp; ViewModels are in the same project</value>
  </data>
  <data name="Options_AllInOneProjectDescription" xml:space="preserve">
    <value>Indicate that the ViewModels and Views (XAML files) are in the same project.</value>
  </data>
  <data name="Options_ButtonAdd" xml:space="preserve">
    <value>_Add</value>
  </data>
  <data name="Options_ButtonCopy" xml:space="preserve">
    <value>_Copy</value>
  </data>
  <data name="Options_ButtonDelete" xml:space="preserve">
    <value>_Delete</value>
  </data>
  <data name="Options_ButtonEdit" xml:space="preserve">
    <value>_Edit</value>
  </data>
  <data name="Options_ButtonImport" xml:space="preserve">
    <value>_Import</value>
  </data>
  <data name="Options_ButtonNew" xml:space="preserve">
    <value>_New</value>
  </data>
  <data name="Options_ButtonOk" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Options_ButtonReset" xml:space="preserve">
    <value>_Reset</value>
  </data>
  <data name="Options_ButtonSetAsActive" xml:space="preserve">
    <value>_Set as Active</value>
  </data>
  <data name="Options_ClassGrouping" xml:space="preserve">
    <value>Class grouping:</value>
  </data>
  <data name="Options_ClassGroupingDescription" xml:space="preserve">
    <value>The element that encapsulates the elements created for each property when creating XAML for a class.</value>
  </data>
  <data name="Options_CodeBehindConstructorContent" xml:space="preserve">
    <value>Code-behind constructor content:</value>
  </data>
  <data name="Options_CodeBehindConstructorContentDescription" xml:space="preserve">
    <value>Code that should be added to the constructor of the code-behind file when setting the datacontext.</value>
  </data>
  <data name="Options_CodeBehindPageContent" xml:space="preserve">
    <value>Code-behind page content:</value>
  </data>
  <data name="Options_CodeBehindPageContentDescription" xml:space="preserve">
    <value>Code that should be added to the code-behind file, outside of the constructor, when setting the datacontext.</value>
  </data>
  <data name="Options_CodeBehindPlaceholder" xml:space="preserve">
    <value>Code-behind file default content:</value>
  </data>
  <data name="Options_CodeBehindPlaceholderDescription" xml:space="preserve">
    <value>The default file contents when creating a code-behind file.</value>
  </data>
  <data name="Options_DataContextHeader" xml:space="preserve">
    <value>DataContext</value>
  </data>
  <data name="Options_DefaultCodeBehindConstructor" xml:space="preserve">
    <value>Default code-behind constructor:</value>
  </data>
  <data name="Options_DefaultCodeBehindConstructorDescription" xml:space="preserve">
    <value>The constuctor of the code-behind file that will be added, if needed and one doesn't already exist.</value>
  </data>
  <data name="Options_EnableExtendedLogging" xml:space="preserve">
    <value>Enable extended logging</value>
  </data>
  <data name="Options_EnumMappingOutput" xml:space="preserve">
    <value>Enum output:</value>
  </data>
  <data name="Options_EnumMappingOutputDescription" xml:space="preserve">
    <value>The output used for each element of an enumeration.</value>
  </data>
  <data name="Options_FallbackOutput" xml:space="preserve">
    <value>Fallback output:</value>
  </data>
  <data name="Options_FallbackOutputDescription" xml:space="preserve">
    <value>The output used for a property when no specific mapping can be applied.</value>
  </data>
  <data name="Options_GeneralSettingsHeader" xml:space="preserve">
    <value>General Settings</value>
  </data>
  <data name="Options_MappingIfReadOnly" xml:space="preserve">
    <value>Only if read-only</value>
  </data>
  <data name="Options_MappingIfReadOnlyDescription" xml:space="preserve">
    <value>The mapping should only apply if the property has a public setter.</value>
  </data>
  <data name="Options_MappingNameFilter" xml:space="preserve">
    <value>Name filter:</value>
  </data>
  <data name="Options_MappingNameFilterDescription" xml:space="preserve">
    <value>The partial name of the property to match with. Multiple values can be specified if separated by a pipe (|) character.</value>
  </data>
  <data name="Options_MappingOutput" xml:space="preserve">
    <value>Output:</value>
  </data>
  <data name="Options_MappingOutputDescription" xml:space="preserve">
    <value>The output that should be generated if this mapping is used.</value>
  </data>
  <data name="Options_MappingsHeader" xml:space="preserve">
    <value>Mappings</value>
  </data>
  <data name="Options_MappingType" xml:space="preserve">
    <value>Type:</value>
  </data>
  <data name="Options_MappingTypeDescription" xml:space="preserve">
    <value>The type of the property to match with. Multiple values can be specified if separated by a pipe (|) character.</value>
  </data>
  <data name="Options_NamingHeader" xml:space="preserve">
    <value>Naming</value>
  </data>
  <data name="Options_NamingVisualizer" xml:space="preserve">
    <value>Visualize solution structure</value>
  </data>
  <data name="Options_ProfileName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="Options_ProfilePageTitle" xml:space="preserve">
    <value>Rapid XAML Toolkit - Edit Profile</value>
  </data>
  <data name="Options_ProfilesSectionHeader" xml:space="preserve">
    <value>Profiles:</value>
  </data>
  <data name="Options_StructureAndNamingHeader" xml:space="preserve">
    <value>Structure and Naming</value>
  </data>
  <data name="Options_StrucutreHeader" xml:space="preserve">
    <value>Project strucutre</value>
  </data>
  <data name="Options_SubPropertyOutput" xml:space="preserve">
    <value>Sub-property output:</value>
  </data>
  <data name="Options_SubPropertyOutputDescription" xml:space="preserve">
    <value>The output used for each property of a generic type.</value>
  </data>
  <data name="Options_TemporaryUiNotice" xml:space="preserve">
    <value>This UI is temporary and will change before release</value>
  </data>
  <data name="Options_ViewModelDirectoryName" xml:space="preserve">
    <value>ViewModel directory name:</value>
  </data>
  <data name="Options_ViewModelDirectoryNameDescription" xml:space="preserve">
    <value>The name of the folder that contains the ViewModels.</value>
  </data>
  <data name="Options_ViewModelFileSuffix" xml:space="preserve">
    <value>ViewModel file suffix:</value>
  </data>
  <data name="Options_ViewModelFileSuffixDescription" xml:space="preserve">
    <value>The text appended to the end of the name of each ViewModel.</value>
  </data>
  <data name="Options_ViewModelProjectSuffix" xml:space="preserve">
    <value>ViewModel project suffix:</value>
  </data>
  <data name="Options_ViewModelProjectSuffixDescription" xml:space="preserve">
    <value>The text from the end of the name of the project that contains the ViewModels. </value>
  </data>
  <data name="Options_XamlFileDirectoryName" xml:space="preserve">
    <value>XAML file directory name:</value>
  </data>
  <data name="Options_XamlFileDirectoryNameDescription" xml:space="preserve">
    <value>The name of the folder that contains the Views (XAML files.)</value>
  </data>
  <data name="Options_XamlFileSuffix" xml:space="preserve">
    <value>XAML file suffix:</value>
  </data>
  <data name="Options_XamlFileSuffixDescription" xml:space="preserve">
    <value>The text appended to the end of the name of each View (XAML file.)</value>
  </data>
  <data name="Options_XamlPageAttribute" xml:space="preserve">
    <value>XAML page attribute:</value>
  </data>
  <data name="Options_XamlPageAttributeDescription" xml:space="preserve">
    <value>The attribute that should be added ot the top level XAMLelement when setting the datacontext.</value>
  </data>
  <data name="Options_XamlPlaceholder" xml:space="preserve">
    <value>XAML file default content:</value>
  </data>
  <data name="Options_XamlPlaceholderDescription" xml:space="preserve">
    <value>The default file contents when creating a new XAML file.</value>
  </data>
  <data name="Options_XamlProjectSuffix" xml:space="preserve">
    <value>XAML project suffix:</value>
  </data>
  <data name="Options_XamlProjectSuffixDescription" xml:space="preserve">
    <value>The text from the end of the name of the project that contains the Views (XAML files.)</value>
  </data>
  <data name="Options_ButtonExport" xml:space="preserve">
    <value>E_xport</value>
  </data>
  <data name="Options_AttemptAutomaticDocumentFormatting" xml:space="preserve">
    <value>Attempt automatic document formatting</value>
  </data>
  <data name="Options_AttemptAutomaticDocumentFormattingDescription" xml:space="preserve">
    <value>Trigger Visual Studio's automatic document formatting after modifying a document</value>
  </data>
  <data name="Options_GeneralHeader" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Options_EnableExtendedLoggingDescription" xml:space="preserve">
    <value>Increases the amount of information displayed in the output window. Can be helpful in identifying errors or diagnosing why specific output was produced.</value>
  </data>
  <data name="Options_Warn_InvalidPlaceholders" xml:space="preserve">
    <value>Invalid placeholder detected: {0}</value>
  </data>
  <data name="Options_Warn_UnknownPlaceholders" xml:space="preserve">
    <value>Unknown placeholder detected: {0}</value>
  </data>
  <data name="Options_Warn_UseNoOutputNotBlank" xml:space="preserve">
    <value>Do not leave blank. Use '{0}' if no output is required.</value>
  </data>
  <data name="Options_XamlAll" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="Options_XamlDialect" xml:space="preserve">
    <value>XAML Project Type</value>
  </data>
  <data name="Options_XamlUwp" xml:space="preserve">
    <value>UWP</value>
  </data>
  <data name="Options_XamlWpf" xml:space="preserve">
    <value>WPF</value>
  </data>
  <data name="Options_XamlXamarinForms" xml:space="preserve">
    <value>Xamarin.Forms</value>
  </data>
  <data name="Options_ButtonSetAsFallBack" xml:space="preserve">
    <value>Set as _Fall Back</value>
  </data>
  <data name="Options_HelpWithProfilesAndMappings" xml:space="preserve">
    <value>About Profiles and Mappings</value>
  </data>
</root>