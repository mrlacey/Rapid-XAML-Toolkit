//<auto-generated />
using System.Windows.Input;
using Microsoft.UI.Xaml;
using Microsoft.Xaml.Interactivity;
using Microsoft.Xaml.Interactions.Core;

namespace RapidXaml;

public partial class EventToCommand : DependencyObject
{
    public static ICommand GetDoubleTapped(DependencyObject obj)
        => (ICommand)obj.GetValue(DoubleTappedProperty);

    public static void SetDoubleTapped(DependencyObject obj, ICommand value)
        => obj.SetValue(DoubleTappedProperty, value);

    public static readonly DependencyProperty DoubleTappedProperty =
        DependencyProperty.RegisterAttached("DoubleTapped", typeof(ICommand), typeof(EventToCommand), new PropertyMetadata(null, OnDoubleTappedChanged));

    private static void OnDoubleTappedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        if (d is UIElement uie)
        {
            // Clear any existing behavior(s)
            Interaction.SetBehaviors(uie, null);

            // Add the new one if there is one
            if (e.NewValue is ICommand newCmd)
            {
                var etb = new EventTriggerBehavior { EventName = "DoubleTapped" };
                etb.Actions.Add(new InvokeCommandAction { Command = newCmd });

                Interaction.SetBehaviors(uie, new BehaviorCollection { etb });
            }
        }
    }
}
