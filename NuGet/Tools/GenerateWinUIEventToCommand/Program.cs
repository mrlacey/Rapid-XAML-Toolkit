namespace GenerateWinUIEventToCommand
{
    internal class Program
    {
        static string template = @"//<auto-generated />
using System.Windows.Input;
using Microsoft.UI.Xaml;
using Microsoft.Xaml.Interactivity;
using Microsoft.Xaml.Interactions.Core;

namespace RapidXaml;

public partial class EventToCommand : DependencyObject
{{
    public static ICommand Get{0}(DependencyObject obj)
        => (ICommand)obj.GetValue({0}Property);

    public static void Set{0}(DependencyObject obj, ICommand value)
        => obj.SetValue({0}Property, value);

    public static readonly DependencyProperty {0}Property =
        DependencyProperty.RegisterAttached(""{0}"", typeof(ICommand), typeof(EventToCommand), new PropertyMetadata(null, On{0}Changed));

    private static void On{0}Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {{
        if (d is UIElement uie)
        {{
            // Clear any existing behavior(s)
            Interaction.SetBehaviors(uie, null);

            // Add the new one if there is one
            if (e.NewValue is ICommand newCmd)
            {{
                var etb = new EventTriggerBehavior {{ EventName = ""{0}"" }};
                etb.Actions.Add(new InvokeCommandAction {{ Command = newCmd }});

                Interaction.SetBehaviors(uie, new BehaviorCollection {{ etb }});
            }}
        }}
    }}
}}
";

        static void Main(string[] args)
        {
            var asmPath = @"C:\Users\matt\.nuget\packages\microsoft.windowsappsdk\1.2.230313.1\lib\net6.0-windows10.0.18362.0\Microsoft.WinUI.dll";

            var targetDir = @"C:\Temp\generated-source\event-to-command";

            var asm = Mono.Cecil.AssemblyDefinition.ReadAssembly(asmPath);

            foreach (Mono.Cecil.TypeDefinition item in asm.MainModule.Types)
            {
                if (item.FullName == "Microsoft.UI.Xaml.UIElement")
                {

                    foreach (var evnt in item.Events)
                    {
                        Console.WriteLine(evnt.Name);

                        var str = string.Format(template, evnt.Name);

                        var fullPath = Path.Combine(targetDir, $"EventToCommand.{evnt.Name}.cs");

                        File.WriteAllText(fullPath, str);
                    }
                }
            }

            Console.WriteLine("done!!");
        }
    }
}
